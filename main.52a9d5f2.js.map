{"version":3,"sources":["scripts/main.js"],"names":["hidden","start","directions","up","right","down","left","Cell","x","y","value","getRandomInteger","maxValue","Math","floor","random","GameField","gameStarted","gameWon","gameLose","cells","score","document","querySelector","textContent","moveUpPossible","moveDownPossible","moveLeftPossible","moveRightPossible","hasEmptyCells","i","j","push","find","cell","fieldCellText","fieldRow","fieldCell","cellUI","previousValue","newValue","classList","remove","add","emptyCells","filter","randomEmptyCell","length","randomNumber","setUIValue","upCell","points","Number","messagWin","neighbourX","neighbourY","neighbour","getCell","direction","bottom","hasNeighbourTheSameValue","existsEmptyCell","isMovePossible","nextCellIndex","limitCondition","cellValue","mergedCells","checkedCell","includes","cellStartX","cellStartY","shouldFindNextIndex","isMerged","nextCell","areNotNeighbours","findNextCellIndex","abs","nextCellValue","showCells","addPoints","tryMove","map","playGame","buttonClassList","buttonPlay","messageBottomClassList","messagStart","contains","gameField","reset","messagLose","insertRandomNumber","addEventListener","e","key","moveUp","moveDown","moveRight","moveLeft","isNextMovePossible"],"mappings":"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","file":"main.52a9d5f2.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst hidden = 'hidden';\nconst start = 'start';\nconst directions = {\n  up: 0,\n  right: 1,\n  down: 2,\n  left: 3,\n};\n\nclass Cell {\n  constructor(x, y) {\n    this.value = null;\n    this.x = x;\n    this.y = y;\n  }\n}\n\nfunction getRandomInteger(maxValue) {\n  return Math.floor(Math.random() * (maxValue + 1));\n}\n\nclass GameField {\n  constructor() {\n    this.gameStarted = false;\n    this.gameWon = false;\n    this.gameLose = false;\n    this.cells = [];\n    this.score = document.querySelector('.game-score');\n    this.score.textContent = 0;\n    this.moveUpPossible = true;\n    this.moveDownPossible = true;\n    this.moveLeftPossible = true;\n    this.moveRightPossible = true;\n    this.hasEmptyCells = true;\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        this.cells.push(new Cell(j, i));\n      }\n    }\n  }\n\n  getCell(x, y) {\n    return this.cells.find(cell => cell.x === x && cell.y === y);\n  }\n\n  setUIValue(cell) {\n    const fieldCellText = 'field-cell';\n    const fieldRow = `.field-row:nth-of-type(${cell.y + 1})`;\n    const fieldCell = `.${fieldCellText}:nth-of-type(${cell.x + 1})`;\n    const cellUI = document.querySelector(`${fieldRow} > ${fieldCell}`);\n    const previousValue = cellUI.textContent;\n    const newValue = cell.value;\n\n    cellUI.textContent = newValue;\n\n    const classList = cellUI.classList;\n\n    classList.remove(`${fieldCellText}--${previousValue}`);\n    classList.add(`${fieldCellText}--${newValue}`);\n  }\n\n  insertRandomNumber() {\n    const emptyCells = this.cells.filter(cell => cell.value === null);\n    const randomEmptyIndex = getRandomInteger(emptyCells.length - 1);\n    const randomEmptyCell = emptyCells[randomEmptyIndex];\n    const randomNumber = getRandomInteger(10) < 10 ? 2 : 4;\n\n    if (randomEmptyCell) {\n      randomEmptyCell.value = randomNumber;\n      this.setUIValue(randomEmptyCell);\n    }\n  }\n\n  showCells(upCell, cell) {\n    cell.value = null;\n    this.setUIValue(upCell);\n    this.setUIValue(cell);\n  }\n\n  addPoints(points) {\n    this.score.textContent = Number(this.score.textContent) + points;\n\n    if (points === 2048) {\n      messagWin.classList.remove(hidden);\n      this.gameWon = true;\n    }\n  }\n\n  hasNeighbourTheSameValue(cell, neighbourX, neighbourY) {\n    const neighbour = this.getCell(neighbourX, neighbourY);\n\n    return neighbour && neighbour.value === cell.value;\n  }\n\n  existsEmptyCell() {\n    const emptyCells = this.cells.filter(cell => cell.value === null);\n\n    return emptyCells.length > 0;\n  }\n\n  isMovePossible(direction) {\n    let neighbourX;\n    let neighbourY;\n\n    for (const cell of this.cells) {\n      switch (direction) {\n        case directions.up:\n          neighbourX = cell.x;\n          neighbourY = cell.y - 1;\n          break;\n        case direction.right:\n          neighbourX = cell.x + 1;\n          neighbourY = cell.y;\n          break;\n        case direction.bottom:\n          neighbourX = cell.x;\n          neighbourY = cell.y + 1;\n          break;\n        default:\n          neighbourX = cell.x - 1;\n          neighbourY = cell.y;\n      }\n\n      if (this.hasNeighbourTheSameValue(cell, neighbourX, neighbourY)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  isNextMovePossible() {\n    this.hasEmptyCells = this.existsEmptyCell();\n    this.moveUpPossible = this.isMovePossible(directions.up);\n    this.moveRightPossible = this.isMovePossible(directions.right);\n    this.moveDownPossible = this.isMovePossible(directions.down);\n    this.moveLeftPossible = this.isMovePossible(directions.left);\n\n    return this.hasEmptyCells || this.moveUpPossible || this.moveRightPossible\n      || this.moveDownPossible || this.moveLeftPossible;\n  }\n\n  shouldFindNextIndex(direction, nextCellIndex, x, y) {\n    let limitCondition;\n\n    if (direction === directions.up || direction === directions.left) {\n      limitCondition = nextCellIndex > 0;\n    } else {\n      limitCondition = nextCellIndex < 3;\n    }\n\n    return limitCondition && this.getCell(x, y).value === null;\n  }\n\n  isMerged(nextCellIndex, y, cellValue, mergedCells) {\n    const checkedCell = this.getCell(nextCellIndex, y);\n\n    return checkedCell.value === cellValue\n    && mergedCells.includes(checkedCell);\n  }\n\n  findNextCellIndex(direction, cellStartX, cellStartY, mergedCells) {\n    let nextCellIndex;\n\n    switch (direction) {\n      case directions.up:\n        nextCellIndex = cellStartY - 1;\n\n        while (this.shouldFindNextIndex(\n          direction,\n          nextCellIndex,\n          cellStartX,\n          nextCellIndex\n        )) {\n          nextCellIndex--;\n        }\n        break;\n      case directions.down:\n        nextCellIndex = cellStartY + 1;\n\n        while (this.shouldFindNextIndex(\n          direction,\n          nextCellIndex,\n          cellStartX,\n          nextCellIndex\n        )) {\n          nextCellIndex++;\n        }\n        break;\n      case directions.left:\n        nextCellIndex = cellStartX - 1;\n\n        while (this.shouldFindNextIndex(\n          direction,\n          nextCellIndex,\n          nextCellIndex,\n          cellStartY,\n        )) {\n          nextCellIndex--;\n        }\n\n        if (this.isMerged(nextCellIndex, cellStartY, mergedCells)) {\n          nextCellIndex++;\n        }\n        break;\n      default:\n        nextCellIndex = cellStartX + 1;\n\n        while (this.shouldFindNextIndex(\n          direction,\n          nextCellIndex,\n          nextCellIndex,\n          cellStartY,\n        )) {\n          nextCellIndex++;\n        }\n\n        if (this.isMerged(nextCellIndex, cellStartY, mergedCells)) {\n          nextCellIndex--;\n        }\n        break;\n    }\n\n    return nextCellIndex;\n  }\n\n  tryMove(direction, cellStartX, cellStartY, mergedCells) {\n    const cell = this.getCell(cellStartX, cellStartY);\n    const cellValue = cell.value;\n\n    if (cellValue !== null) {\n      const nextCellIndex = this.findNextCellIndex(\n        direction,\n        cellStartX,\n        cellStartY,\n        mergedCells\n      );\n      let nextCell;\n      let areNotNeighbours;\n\n      if (direction === directions.up || direction === directions.down) {\n        nextCell = this.getCell(cellStartX, nextCellIndex);\n        areNotNeighbours = Math.abs(cellStartY - nextCellIndex) > 1;\n      } else {\n        nextCell = this.getCell(nextCellIndex, cellStartY);\n        areNotNeighbours = Math.abs(cellStartX - nextCellIndex) > 1;\n      }\n\n      const nextCellValue = nextCell.value;\n\n      if (nextCellValue === null) {\n        nextCell.value = cellValue;\n        this.showCells(nextCell, cell);\n      } else if (nextCellValue === cellValue) {\n        nextCell.value += cellValue;\n        this.addPoints(2 * cellValue);\n        this.showCells(nextCell, cell);\n\n        if (direction === directions.left || direction === directions.right) {\n          mergedCells.push(nextCell);\n        }\n      } else if (nextCellValue !== cellValue && areNotNeighbours) {\n        switch (direction) {\n          case directions.up:\n            nextCell = this.getCell(cellStartX, nextCellIndex + 1);\n            break;\n          case directions.down:\n            nextCell = this.getCell(cellStartX, nextCellIndex - 1);\n            break;\n          case directions.left:\n            nextCell = this.getCell(nextCellIndex + 1, cellStartY);\n            break;\n          default:\n            nextCell = this.getCell(nextCellIndex - 1, cellStartY);\n            break;\n        }\n        nextCell.value = cellValue;\n        this.showCells(nextCell, cell);\n      }\n    }\n  }\n\n  moveUp() {\n    for (let x = 0; x < 4; x++) {\n      for (let y = 1; y < 4; y++) {\n        this.tryMove(directions.up, x, y);\n      }\n    }\n  }\n\n  moveDown() {\n    for (let x = 0; x < 4; x++) {\n      for (let y = 2; y >= 0; y--) {\n        this.tryMove(directions.down, x, y);\n      }\n    }\n  }\n\n  moveLeft() {\n    for (let y = 0; y < 4; y++) {\n      const mergedCells = [];\n\n      for (let x = 1; x < 4; x++) {\n        this.tryMove(directions.left, x, y, mergedCells);\n      }\n    }\n  }\n\n  moveRight() {\n    for (let y = 0; y < 4; y++) {\n      const mergedCells = [];\n\n      for (let x = 2; x >= 0; x--) {\n        this.tryMove(directions.right, x, y, mergedCells);\n      }\n    }\n  }\n\n  reset() {\n    this.cells = this.cells.map(cell => {\n      cell.value = null;\n      this.setUIValue(cell);\n\n      return cell;\n    });\n\n    this.hasEmptyCells = true;\n    this.moveDownPossible = true;\n    this.moveLeftPossible = true;\n    this.moveLeftPossible = true;\n    this.moveUpPossible = true;\n  }\n}\n\nfunction playGame() {\n  const buttonClassList = buttonPlay.classList;\n  const messageBottomClassList = messagStart.classList;\n\n  if (buttonClassList.contains(start)) {\n    buttonClassList.remove(start);\n    buttonClassList.add('restart');\n    buttonPlay.textContent = 'Restart';\n    messageBottomClassList.add(hidden);\n    gameField.gameStarted = true;\n  } else {\n    gameField.reset();\n    gameField.score.textContent = 0;\n\n    if (gameField.gameWon) {\n      messagWin.classList.add(hidden);\n      gameField.gameWon = false;\n    } else if (gameField.gameLose) {\n      gameField.gameLose = false;\n      messagLose.classList.add(hidden);\n    }\n  }\n\n  gameField.insertRandomNumber();\n  gameField.insertRandomNumber();\n}\n\nconst buttonPlay = document.querySelector('.button');\nconst messagStart = document.querySelector('.message-start');\nconst messagWin = document.querySelector('.message-win');\nconst messagLose = document.querySelector('.message-lose');\nconst gameField = new GameField();\n\nbuttonPlay.addEventListener('click', playGame);\n\ndocument.addEventListener('keydown', e => {\n  if (gameField.gameStarted && !gameField.gameWon && !gameField.gameLose) {\n    switch (e.key) {\n      case 'ArrowUp':\n        if (gameField.hasEmptyCells || gameField.moveUpPossible) {\n          gameField.moveUp();\n        }\n        break;\n      case 'ArrowDown':\n        if (gameField.hasEmptyCells || gameField.moveDownPossible) {\n          gameField.moveDown();\n        }\n        break;\n      case 'ArrowRight':\n        if (gameField.hasEmptyCells || gameField.moveRightPossible) {\n          gameField.moveRight();\n        }\n        break;\n      default:\n        if (gameField.hasEmptyCells || gameField.moveLeftPossible) {\n          gameField.moveLeft();\n        }\n        break;\n    }\n\n    gameField.insertRandomNumber();\n\n    if (!gameField.isNextMovePossible()) {\n      messagLose.classList.remove(hidden);\n      gameField.gameLose = true;\n    }\n  }\n});\n"]}